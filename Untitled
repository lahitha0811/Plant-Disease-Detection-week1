{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27549,"status":"ok","timestamp":1747459972795,"user":{"displayName":"Valluri Lahitha","userId":"11426555888415091738"},"user_tz":-330},"id":"THcX7F1XqoDc","outputId":"2a3b03a4-ad2b-4a0a-a53c-a2e12c607557"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["# Mount the drive here\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":75815,"status":"ok","timestamp":1747460048603,"user":{"displayName":"Valluri Lahitha","userId":"11426555888415091738"},"user_tz":-330},"id":"hG__vcKkqyR5","outputId":"b1e98b22-38d3-4517-e9d1-dd2830bf273c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Successfully extracted '/content/drive/MyDrive/archive (2).zip/archive (2).zip' to '/content'\n"]}],"source":["import zipfile\n","import os\n","\n","\n","# Define the path to the zip file and the extraction directory\n","zip_file_path = \"/content/drive/MyDrive/archive (2).zip/archive (2).zip\"\n","extract_dir = \"/content\"\n","\n","# Check if the zip file exists\n","if os.path.exists(zip_file_path):\n","    try:\n","        # Create a ZipFile object\n","        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n","            # Extract all contents to the specified directory\n","            zip_ref.extractall(extract_dir)\n","        print(f\"Successfully extracted '{zip_file_path}' to '{extract_dir}'\")\n","    except zipfile.BadZipFile:\n","        print(f\"Error: '{zip_file_path}' is not a valid zip file.\")\n","    except Exception as e:\n","        print(f\"An error occurred: {e}\")\n","else:\n","    print(f\"Error: '{zip_file_path}' does not exist.\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"j4nElOIxrVTp"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import pathlib\n","import os\n","import glob as gb\n","import glob\n","import cv2\n","import tensorflow as tf"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"B3L0TLKerZnB"},"outputs":[],"source":["train='/content/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/train'\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pEKs2A1krak4"},"outputs":[],"source":["size=224"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":588,"status":"ok","timestamp":1747460057101,"user":{"displayName":"Valluri Lahitha","userId":"11426555888415091738"},"user_tz":-330},"id":"tPDPmOyMrc01","outputId":"5eed100f-fa71-4c9f-cbc2-506902e3142e"},"outputs":[{"name":"stdout","output_type":"stream","text":["Found 63282 images belonging to 38 classes.\n"]}],"source":["train_generator=tf.keras.preprocessing.image.ImageDataGenerator(\n","    rotation_range=90,\n","    width_shift_range=0.0,\n","    height_shift_range=0.0,\n","    shear_range=0.0,\n","    zoom_range=0.0,\n","    horizontal_flip=False,\n","    vertical_flip=False,\n","    rescale=1/255.0,\n","    preprocessing_function=None,\n","    validation_split=0.1,\n",").flow_from_directory(train,\n","                      batch_size=164,\n","                      target_size=(size,size),\n","                      subset=\"training\",\n","                      color_mode='rgb', #\"rgb\", \"rgba\", or \"grayscale\"\n","                      class_mode='categorical',  # Use 'binary', 'sparse','categorical' or None as needed\n","                      shuffle=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1747460057118,"user":{"displayName":"Valluri Lahitha","userId":"11426555888415091738"},"user_tz":-330},"id":"Rs95oSUTrgEM","outputId":"b0484e37-ba03-4d16-e432-e455588c29b5"},"outputs":[{"data":{"text/plain":["{'Apple___Apple_scab': 0,\n"," 'Apple___Black_rot': 1,\n"," 'Apple___Cedar_apple_rust': 2,\n"," 'Apple___healthy': 3,\n"," 'Blueberry___healthy': 4,\n"," 'Cherry_(including_sour)___Powdery_mildew': 5,\n"," 'Cherry_(including_sour)___healthy': 6,\n"," 'Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot': 7,\n"," 'Corn_(maize)___Common_rust_': 8,\n"," 'Corn_(maize)___Northern_Leaf_Blight': 9,\n"," 'Corn_(maize)___healthy': 10,\n"," 'Grape___Black_rot': 11,\n"," 'Grape___Esca_(Black_Measles)': 12,\n"," 'Grape___Leaf_blight_(Isariopsis_Leaf_Spot)': 13,\n"," 'Grape___healthy': 14,\n"," 'Orange___Haunglongbing_(Citrus_greening)': 15,\n"," 'Peach___Bacterial_spot': 16,\n"," 'Peach___healthy': 17,\n"," 'Pepper,_bell___Bacterial_spot': 18,\n"," 'Pepper,_bell___healthy': 19,\n"," 'Potato___Early_blight': 20,\n"," 'Potato___Late_blight': 21,\n"," 'Potato___healthy': 22,\n"," 'Raspberry___healthy': 23,\n"," 'Soybean___healthy': 24,\n"," 'Squash___Powdery_mildew': 25,\n"," 'Strawberry___Leaf_scorch': 26,\n"," 'Strawberry___healthy': 27,\n"," 'Tomato___Bacterial_spot': 28,\n"," 'Tomato___Early_blight': 29,\n"," 'Tomato___Late_blight': 30,\n"," 'Tomato___Leaf_Mold': 31,\n"," 'Tomato___Septoria_leaf_spot': 32,\n"," 'Tomato___Spider_mites Two-spotted_spider_mite': 33,\n"," 'Tomato___Target_Spot': 34,\n"," 'Tomato___Tomato_Yellow_Leaf_Curl_Virus': 35,\n"," 'Tomato___Tomato_mosaic_virus': 36,\n"," 'Tomato___healthy': 37}"]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["train_generator.class_indices"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1J7SZEdgmDJCcBUhy2uL5_zV87eYIy-k8"},"executionInfo":{"elapsed":7718,"status":"ok","timestamp":1747460064858,"user":{"displayName":"Valluri Lahitha","userId":"11426555888415091738"},"user_tz":-330},"id":"0cITuwz_ri4l","outputId":"7bc533e8-e2b4-4069-94d7-b7d4b895568b"},"outputs":[{"data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{},"output_type":"display_data"}],"source":["#let's display some images from training set\n","\n","classes=list(train_generator.class_indices.keys())\n","plt.figure(figsize=(20,20))\n","for X_batch, y_batch in train_generator:\n","\n","    for i in range(0,16):\n","        plt.subplot(4,4,i+1)\n","        plt.imshow(X_batch[i])\n","        plt.title(classes[np.where(y_batch[i]==1)[0][0]])   # when y is categorical\n","        # plt.title(classes[int(y_batch[i])])   # when y is binary or sparse\n","        plt.grid(None)\n","    # show the plot\n","    plt.show()\n","    break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FmLTtLtzrm2G"},"outputs":[],"source":["valid='/content/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/valid'\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1747460064896,"user":{"displayName":"Valluri Lahitha","userId":"11426555888415091738"},"user_tz":-330},"id":"HtBrg_RfrqB8","outputId":"3dd5c806-d025-49cb-b58d-a90f5c98850c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Found 1742 images belonging to 38 classes.\n"]}],"source":["valid_generator=tf.keras.preprocessing.image.ImageDataGenerator(\n","    rescale=1/255.0,\n","    preprocessing_function=None,\n","    validation_split=0.1,\n",").flow_from_directory(valid,\n","                      batch_size=164,\n","                      target_size=(224,224),\n","                      subset='validation',\n","                      color_mode='rgb', #\"rgb\", \"rgba\", or \"grayscale\"\n","                      class_mode='categorical',  # Use 'binary', 'sparse','categorical' or None as needed\n","                      shuffle=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"66UFBNQdrwKt"},"outputs":[],"source":["test='/content/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/valid'"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1747460064906,"user":{"displayName":"Valluri Lahitha","userId":"11426555888415091738"},"user_tz":-330},"id":"MpAsD2xVr3qD","outputId":"20b13386-3452-4950-f3f6-5779cfea6edf"},"outputs":[{"name":"stdout","output_type":"stream","text":["Found 17572 images belonging to 38 classes.\n"]}],"source":["test_generator=tf.keras.preprocessing.image.ImageDataGenerator(\n","    rescale=1/255.0,\n","    preprocessing_function=None,\n",").flow_from_directory(test,\n","                      batch_size=164,\n","                      target_size=(224,224),\n","                      color_mode='rgb', #\"rgb\", \"rgba\", or \"grayscale\"\n","                      class_mode='categorical',  # Use 'binary', 'sparse','categorical' or None as needed\n","                      shuffle=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1747460064913,"user":{"displayName":"Valluri Lahitha","userId":"11426555888415091738"},"user_tz":-330},"id":"WdxADXW4r6tU","outputId":"9f8c24ce-a516-4b66-a4a5-b4828aa21a93"},"outputs":[{"data":{"text/plain":["{'Apple___Apple_scab': 0,\n"," 'Apple___Black_rot': 1,\n"," 'Apple___Cedar_apple_rust': 2,\n"," 'Apple___healthy': 3,\n"," 'Blueberry___healthy': 4,\n"," 'Cherry_(including_sour)___Powdery_mildew': 5,\n"," 'Cherry_(including_sour)___healthy': 6,\n"," 'Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot': 7,\n"," 'Corn_(maize)___Common_rust_': 8,\n"," 'Corn_(maize)___Northern_Leaf_Blight': 9,\n"," 'Corn_(maize)___healthy': 10,\n"," 'Grape___Black_rot': 11,\n"," 'Grape___Esca_(Black_Measles)': 12,\n"," 'Grape___Leaf_blight_(Isariopsis_Leaf_Spot)': 13,\n"," 'Grape___healthy': 14,\n"," 'Orange___Haunglongbing_(Citrus_greening)': 15,\n"," 'Peach___Bacterial_spot': 16,\n"," 'Peach___healthy': 17,\n"," 'Pepper,_bell___Bacterial_spot': 18,\n"," 'Pepper,_bell___healthy': 19,\n"," 'Potato___Early_blight': 20,\n"," 'Potato___Late_blight': 21,\n"," 'Potato___healthy': 22,\n"," 'Raspberry___healthy': 23,\n"," 'Soybean___healthy': 24,\n"," 'Squash___Powdery_mildew': 25,\n"," 'Strawberry___Leaf_scorch': 26,\n"," 'Strawberry___healthy': 27,\n"," 'Tomato___Bacterial_spot': 28,\n"," 'Tomato___Early_blight': 29,\n"," 'Tomato___Late_blight': 30,\n"," 'Tomato___Leaf_Mold': 31,\n"," 'Tomato___Septoria_leaf_spot': 32,\n"," 'Tomato___Spider_mites Two-spotted_spider_mite': 33,\n"," 'Tomato___Target_Spot': 34,\n"," 'Tomato___Tomato_Yellow_Leaf_Curl_Virus': 35,\n"," 'Tomato___Tomato_mosaic_virus': 36,\n"," 'Tomato___healthy': 37}"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["test_generator.class_indices"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":553},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1747460064921,"user":{"displayName":"Valluri Lahitha","userId":"11426555888415091738"},"user_tz":-330},"id":"yqFfQfFyr9TO","outputId":"b51cad1c-1054-42eb-a1bc-482cf16b0bac"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"data":{"text/html":["\u003cpre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"\u003e\u003cspan style=\"font-weight: bold\"\u003eModel: \"sequential\"\u003c/span\u003e\n","\u003c/pre\u003e\n"],"text/plain":["\u001b[1mModel: \"sequential\"\u001b[0m\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["\u003cpre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"\u003e┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n","┃\u003cspan style=\"font-weight: bold\"\u003e Layer (type)                    \u003c/span\u003e┃\u003cspan style=\"font-weight: bold\"\u003e Output Shape           \u003c/span\u003e┃\u003cspan style=\"font-weight: bold\"\u003e       Param # \u003c/span\u003e┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n","│ Conv1 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eConv2D\u003c/span\u003e)                  │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e224\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e224\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e32\u003c/span\u003e)   │         \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e4,736\u003c/span\u003e │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Pool1 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eMaxPooling2D\u003c/span\u003e)            │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e112\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e112\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e32\u003c/span\u003e)   │             \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e0\u003c/span\u003e │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Conv2 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eConv2D\u003c/span\u003e)                  │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e112\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e112\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e64\u003c/span\u003e)   │        \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e51,264\u003c/span\u003e │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Pool2 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eMaxPooling2D\u003c/span\u003e)            │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e56\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e56\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e64\u003c/span\u003e)     │             \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e0\u003c/span\u003e │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Conv3 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eConv2D\u003c/span\u003e)                  │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e56\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e56\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e128\u003c/span\u003e)    │        \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e73,856\u003c/span\u003e │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Conv4 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eConv2D\u003c/span\u003e)                  │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e56\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e56\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e256\u003c/span\u003e)    │       \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e295,168\u003c/span\u003e │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Pool3 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eMaxPooling2D\u003c/span\u003e)            │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e28\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e28\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e256\u003c/span\u003e)    │             \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e0\u003c/span\u003e │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Flatten1 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eFlatten\u003c/span\u003e)              │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e200704\u003c/span\u003e)         │             \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e0\u003c/span\u003e │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Dense1 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eDense\u003c/span\u003e)                  │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e128\u003c/span\u003e)            │    \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e25,690,240\u003c/span\u003e │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Dense2 (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eDense\u003c/span\u003e)                  │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e64\u003c/span\u003e)             │         \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e8,256\u003c/span\u003e │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Output (\u003cspan style=\"color: #0087ff; text-decoration-color: #0087ff\"\u003eDense\u003c/span\u003e)                  │ (\u003cspan style=\"color: #00d7ff; text-decoration-color: #00d7ff\"\u003eNone\u003c/span\u003e, \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e38\u003c/span\u003e)             │         \u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e2,470\u003c/span\u003e │\n","└─────────────────────────────────┴────────────────────────┴───────────────┘\n","\u003c/pre\u003e\n"],"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n","│ Conv1 (\u001b[38;5;33mConv2D\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m32\u001b[0m)   │         \u001b[38;5;34m4,736\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Pool1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m32\u001b[0m)   │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Conv2 (\u001b[38;5;33mConv2D\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │        \u001b[38;5;34m51,264\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Pool2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Conv3 (\u001b[38;5;33mConv2D\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │        \u001b[38;5;34m73,856\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Conv4 (\u001b[38;5;33mConv2D\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m295,168\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Pool3 (\u001b[38;5;33mMaxPooling2D\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Flatten1 (\u001b[38;5;33mFlatten\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200704\u001b[0m)         │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Dense1 (\u001b[38;5;33mDense\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │    \u001b[38;5;34m25,690,240\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Dense2 (\u001b[38;5;33mDense\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ Output (\u001b[38;5;33mDense\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m38\u001b[0m)             │         \u001b[38;5;34m2,470\u001b[0m │\n","└─────────────────────────────────┴────────────────────────┴───────────────┘\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["\u003cpre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"\u003e\u003cspan style=\"font-weight: bold\"\u003e Total params: \u003c/span\u003e\u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e26,125,990\u003c/span\u003e (99.66 MB)\n","\u003c/pre\u003e\n"],"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m26,125,990\u001b[0m (99.66 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["\u003cpre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"\u003e\u003cspan style=\"font-weight: bold\"\u003e Trainable params: \u003c/span\u003e\u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e26,125,990\u003c/span\u003e (99.66 MB)\n","\u003c/pre\u003e\n"],"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m26,125,990\u001b[0m (99.66 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["\u003cpre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"\u003e\u003cspan style=\"font-weight: bold\"\u003e Non-trainable params: \u003c/span\u003e\u003cspan style=\"color: #00af00; text-decoration-color: #00af00\"\u003e0\u003c/span\u003e (0.00 B)\n","\u003c/pre\u003e\n"],"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["None\n"]}],"source":["from tensorflow import keras\n","model = keras.models.Sequential()  # To build NN\n","\n","model.add(keras.layers.Conv2D(filters=32, kernel_size=7, strides=1,\n","                padding=\"same\", activation=\"relu\", name=\"Conv1\", input_shape= (224,224,3)))\n","\n","model.add(keras.layers.MaxPool2D(pool_size=2, name=\"Pool1\"))\n","\n","model.add(keras.layers.Conv2D(filters=64, kernel_size=5, strides=1,\n","                              padding=\"same\", activation=\"relu\", name=\"Conv2\"))\n","model.add(keras.layers.MaxPool2D(pool_size=2, name=\"Pool2\"))\n","\n","model.add(keras.layers.Conv2D(filters=128, kernel_size=3, strides=1,\n","                              padding=\"same\", activation=\"relu\", name=\"Conv3\"))\n","\n","model.add(keras.layers.Conv2D(filters=256, kernel_size=3, strides=1,\n","                              padding=\"same\", activation=\"relu\", name=\"Conv4\"))\n","\n","model.add(keras.layers.MaxPool2D(pool_size=2, name=\"Pool3\"))\n","\n","model.add(keras.layers.Flatten(name=\"Flatten1\"))   #flatten layer - to convert into 1d vector\n","\n","model.add(keras.layers.Dense(128, activation=\"relu\", name=\"Dense1\"))  #hidden layer\n","tf.keras.layers.Dropout(0.5)\n","\n","model.add(keras.layers.Dense(64, activation=\"relu\", name=\"Dense2\"))  #hidden layer\n","tf.keras.layers.Dropout(0.5)\n","\n","model.add(keras.layers.Dense(38, activation=\"softmax\", name=\"Output\"))  #output layer\n","\n","# The model’s summary() method displays all the model’s layers\n","print(model.summary())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n06uuKUIsAnd"},"outputs":[],"source":["from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n","early_stopping = EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True)\n","model_checkpoint = ModelCheckpoint('best_model.keras', monitor='val_loss', save_best_only=True)\n","model_ReduceLROnPlateau = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=5, min_lr=0.000001)\n","\n","callbacks = [early_stopping, model_checkpoint, model_ReduceLROnPlateau]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LMWbIrfYsHce"},"outputs":[],"source":["model.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy', 'precision', 'recall'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"9uUm5pbksTDF"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"name":"stdout","output_type":"stream","text":["Epoch 1/8\n","\u001b[1m386/386\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m952s\u001b[0m 2s/step - accuracy: 0.2098 - loss: 2.8516 - precision: 0.6716 - recall: 0.0831 - val_accuracy: 0.6085 - val_loss: 1.2546 - val_precision: 0.7657 - val_recall: 0.4633 - learning_rate: 0.0010\n","Epoch 2/8\n","\u001b[1m386/386\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m825s\u001b[0m 2s/step - accuracy: 0.6739 - loss: 1.0679 - precision: 0.8075 - recall: 0.5549 - val_accuracy: 0.6969 - val_loss: 0.9425 - val_precision: 0.7891 - val_recall: 0.6292 - learning_rate: 0.0010\n","Epoch 3/8\n","\u001b[1m386/386\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m821s\u001b[0m 2s/step - accuracy: 0.8114 - loss: 0.5952 - precision: 0.8700 - recall: 0.7593 - val_accuracy: 0.8416 - val_loss: 0.5195 - val_precision: 0.8747 - val_recall: 0.8054 - learning_rate: 0.0010\n","Epoch 4/8\n","\u001b[1m386/386\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m815s\u001b[0m 2s/step - accuracy: 0.8634 - loss: 0.4195 - precision: 0.8988 - recall: 0.8337 - val_accuracy: 0.8542 - val_loss: 0.4542 - val_precision: 0.8896 - val_recall: 0.8278 - learning_rate: 0.0010\n","Epoch 5/8\n","\u001b[1m386/386\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m834s\u001b[0m 2s/step - accuracy: 0.8969 - loss: 0.3197 - precision: 0.9194 - recall: 0.8768 - val_accuracy: 0.8777 - val_loss: 0.3720 - val_precision: 0.9031 - val_recall: 0.8565 - learning_rate: 0.0010\n","Epoch 6/8\n","\u001b[1m386/386\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m827s\u001b[0m 2s/step - accuracy: 0.9116 - loss: 0.2669 - precision: 0.9281 - recall: 0.8966 - val_accuracy: 0.8961 - val_loss: 0.3122 - val_precision: 0.9117 - val_recall: 0.8835 - learning_rate: 0.0010\n","Epoch 7/8\n","\u001b[1m386/386\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m837s\u001b[0m 2s/step - accuracy: 0.9342 - loss: 0.1959 - precision: 0.9449 - recall: 0.9246 - val_accuracy: 0.9116 - val_loss: 0.2576 - val_precision: 0.9290 - val_recall: 0.9018 - learning_rate: 0.0010\n","Epoch 8/8\n","\u001b[1m386/386\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m859s\u001b[0m 2s/step - accuracy: 0.9426 - loss: 0.1733 - precision: 0.9520 - recall: 0.9343 - val_accuracy: 0.8995 - val_loss: 0.3086 - val_precision: 0.9140 - val_recall: 0.8909 - learning_rate: 0.0010\n"]}],"source":["history = model.fit(train_generator, epochs=8, validation_data=valid_generator, callbacks=callbacks)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"4xrHr8FSsZXh"},"outputs":[],"source":["import seaborn as sns\n","acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","\n","precision = history.history['precision']\n","val_precision = history.history['val_precision']\n","\n","recall = history.history['recall']\n","val_recall = history.history['val_recall']\n","\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(1, len(loss) + 1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"2fGV_6MJseYu"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 640x480 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(epochs, acc, color='green', label='Training Accuracy')\n","plt.plot(epochs, val_acc, color='blue', label='Validation Accuracy')\n","plt.title('Training and Validation Accuracy')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Epoch')\n","plt.legend()\n","plt.ylim(0, 1.02)\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FtUE9NLkshkX"},"outputs":[],"source":["model_evaluate = model.evaluate(test_generator)\n","print('Loss: ', model_evaluate[0])\n","print('Accuracy: ', model_evaluate[1])\n","print('Precision: ', model_evaluate[2])\n","print('Recall: ', model_evaluate[3])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OY35w0emsm-M"},"outputs":[],"source":["   # TO save the model\n","model.save('PDDS.keras')"]}],"metadata":{"accelerator":"GPU","colab":{"authorship_tag":"ABX9TyPlbOIc06LHoDaW2j5dx0Bi","gpuType":"T4","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}